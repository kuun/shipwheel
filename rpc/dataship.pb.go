// Code generated by protoc-gen-go.
// source: dataship.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	dataship.proto

It has these top-level messages:
	OpResult
	PbAddr
	PbRoute
	PbRule
	PbAddrMod
	PbRouteMod
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OpCode int32

const (
	OpCode_OP_SUCCESS OpCode = 0
	OpCode_OP_FAIL    OpCode = 1
)

var OpCode_name = map[int32]string{
	0: "OP_SUCCESS",
	1: "OP_FAIL",
}
var OpCode_value = map[string]int32{
	"OP_SUCCESS": 0,
	"OP_FAIL":    1,
}

func (x OpCode) String() string {
	return proto.EnumName(OpCode_name, int32(x))
}
func (OpCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PbRule_RuleDirect int32

const (
	PbRule_INT2EXT PbRule_RuleDirect = 0
	PbRule_EXT2INT PbRule_RuleDirect = 1
)

var PbRule_RuleDirect_name = map[int32]string{
	0: "INT2EXT",
	1: "EXT2INT",
}
var PbRule_RuleDirect_value = map[string]int32{
	"INT2EXT": 0,
	"EXT2INT": 1,
}

func (x PbRule_RuleDirect) String() string {
	return proto.EnumName(PbRule_RuleDirect_name, int32(x))
}
func (PbRule_RuleDirect) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type PbRule_RuleType int32

const (
	PbRule_TCP  PbRule_RuleType = 0
	PbRule_HTTP PbRule_RuleType = 1
	PbRule_UDP  PbRule_RuleType = 128
)

var PbRule_RuleType_name = map[int32]string{
	0:   "TCP",
	1:   "HTTP",
	128: "UDP",
}
var PbRule_RuleType_value = map[string]int32{
	"TCP":  0,
	"HTTP": 1,
	"UDP":  128,
}

func (x PbRule_RuleType) String() string {
	return proto.EnumName(PbRule_RuleType_name, int32(x))
}
func (PbRule_RuleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

type OpResult struct {
	Code OpCode `protobuf:"varint,1,opt,name=code,enum=rpc.OpCode" json:"code,omitempty"`
}

func (m *OpResult) Reset()                    { *m = OpResult{} }
func (m *OpResult) String() string            { return proto.CompactTextString(m) }
func (*OpResult) ProtoMessage()               {}
func (*OpResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpResult) GetCode() OpCode {
	if m != nil {
		return m.Code
	}
	return OpCode_OP_SUCCESS
}

type PbAddr struct {
	Iface string `protobuf:"bytes,1,opt,name=iface" json:"iface,omitempty"`
	Ip    string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Mask  uint32 `protobuf:"varint,3,opt,name=mask" json:"mask,omitempty"`
}

func (m *PbAddr) Reset()                    { *m = PbAddr{} }
func (m *PbAddr) String() string            { return proto.CompactTextString(m) }
func (*PbAddr) ProtoMessage()               {}
func (*PbAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PbAddr) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

func (m *PbAddr) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PbAddr) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

type PbRoute struct {
	DstNet  string `protobuf:"bytes,1,opt,name=dstNet" json:"dstNet,omitempty"`
	DstMask uint32 `protobuf:"varint,2,opt,name=dstMask" json:"dstMask,omitempty"`
	Iface   string `protobuf:"bytes,3,opt,name=iface" json:"iface,omitempty"`
	Gateway string `protobuf:"bytes,4,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *PbRoute) Reset()                    { *m = PbRoute{} }
func (m *PbRoute) String() string            { return proto.CompactTextString(m) }
func (*PbRoute) ProtoMessage()               {}
func (*PbRoute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PbRoute) GetDstNet() string {
	if m != nil {
		return m.DstNet
	}
	return ""
}

func (m *PbRoute) GetDstMask() uint32 {
	if m != nil {
		return m.DstMask
	}
	return 0
}

func (m *PbRoute) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

func (m *PbRoute) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type PbRule struct {
	Id         uint32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Direct     PbRule_RuleDirect `protobuf:"varint,2,opt,name=direct,enum=rpc.PbRule_RuleDirect" json:"direct,omitempty"`
	Type       PbRule_RuleType   `protobuf:"varint,3,opt,name=type,enum=rpc.PbRule_RuleType" json:"type,omitempty"`
	ListenAddr string            `protobuf:"bytes,4,opt,name=listenAddr" json:"listenAddr,omitempty"`
	ListenPort uint32            `protobuf:"varint,5,opt,name=listenPort" json:"listenPort,omitempty"`
	DstAddr    string            `protobuf:"bytes,6,opt,name=dstAddr" json:"dstAddr,omitempty"`
	DstPort    uint32            `protobuf:"varint,7,opt,name=dstPort" json:"dstPort,omitempty"`
	SendAddr   string            `protobuf:"bytes,8,opt,name=sendAddr" json:"sendAddr,omitempty"`
}

func (m *PbRule) Reset()                    { *m = PbRule{} }
func (m *PbRule) String() string            { return proto.CompactTextString(m) }
func (*PbRule) ProtoMessage()               {}
func (*PbRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PbRule) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PbRule) GetDirect() PbRule_RuleDirect {
	if m != nil {
		return m.Direct
	}
	return PbRule_INT2EXT
}

func (m *PbRule) GetType() PbRule_RuleType {
	if m != nil {
		return m.Type
	}
	return PbRule_TCP
}

func (m *PbRule) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func (m *PbRule) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *PbRule) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *PbRule) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *PbRule) GetSendAddr() string {
	if m != nil {
		return m.SendAddr
	}
	return ""
}

type PbAddrMod struct {
	Old *PbAddr `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	New *PbAddr `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
}

func (m *PbAddrMod) Reset()                    { *m = PbAddrMod{} }
func (m *PbAddrMod) String() string            { return proto.CompactTextString(m) }
func (*PbAddrMod) ProtoMessage()               {}
func (*PbAddrMod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PbAddrMod) GetOld() *PbAddr {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *PbAddrMod) GetNew() *PbAddr {
	if m != nil {
		return m.New
	}
	return nil
}

type PbRouteMod struct {
	Old *PbRoute `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	New *PbRoute `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
}

func (m *PbRouteMod) Reset()                    { *m = PbRouteMod{} }
func (m *PbRouteMod) String() string            { return proto.CompactTextString(m) }
func (*PbRouteMod) ProtoMessage()               {}
func (*PbRouteMod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PbRouteMod) GetOld() *PbRoute {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *PbRouteMod) GetNew() *PbRoute {
	if m != nil {
		return m.New
	}
	return nil
}

func init() {
	proto.RegisterType((*OpResult)(nil), "rpc.OpResult")
	proto.RegisterType((*PbAddr)(nil), "rpc.PbAddr")
	proto.RegisterType((*PbRoute)(nil), "rpc.PbRoute")
	proto.RegisterType((*PbRule)(nil), "rpc.PbRule")
	proto.RegisterType((*PbAddrMod)(nil), "rpc.PbAddrMod")
	proto.RegisterType((*PbRouteMod)(nil), "rpc.PbRouteMod")
	proto.RegisterEnum("rpc.OpCode", OpCode_name, OpCode_value)
	proto.RegisterEnum("rpc.PbRule_RuleDirect", PbRule_RuleDirect_name, PbRule_RuleDirect_value)
	proto.RegisterEnum("rpc.PbRule_RuleType", PbRule_RuleType_name, PbRule_RuleType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dataship service

type DatashipClient interface {
	// AddRule adds to Dataship
	AddRule(ctx context.Context, in *PbRule, opts ...grpc.CallOption) (*OpResult, error)
	// DelRule deletes a Rule on Dataship
	DelRule(ctx context.Context, in *PbRule, opts ...grpc.CallOption) (*OpResult, error)
	AddAddr(ctx context.Context, in *PbAddr, opts ...grpc.CallOption) (*OpResult, error)
	DelAddr(ctx context.Context, in *PbAddr, opts ...grpc.CallOption) (*OpResult, error)
	ModAddr(ctx context.Context, in *PbAddrMod, opts ...grpc.CallOption) (*OpResult, error)
	AddRoute(ctx context.Context, in *PbRoute, opts ...grpc.CallOption) (*OpResult, error)
	DelRoute(ctx context.Context, in *PbRoute, opts ...grpc.CallOption) (*OpResult, error)
	ModRoute(ctx context.Context, in *PbRouteMod, opts ...grpc.CallOption) (*OpResult, error)
}

type datashipClient struct {
	cc *grpc.ClientConn
}

func NewDatashipClient(cc *grpc.ClientConn) DatashipClient {
	return &datashipClient{cc}
}

func (c *datashipClient) AddRule(ctx context.Context, in *PbRule, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/AddRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) DelRule(ctx context.Context, in *PbRule, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/DelRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) AddAddr(ctx context.Context, in *PbAddr, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/AddAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) DelAddr(ctx context.Context, in *PbAddr, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/DelAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) ModAddr(ctx context.Context, in *PbAddrMod, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/ModAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) AddRoute(ctx context.Context, in *PbRoute, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/AddRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) DelRoute(ctx context.Context, in *PbRoute, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/DelRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datashipClient) ModRoute(ctx context.Context, in *PbRouteMod, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := grpc.Invoke(ctx, "/rpc.Dataship/ModRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dataship service

type DatashipServer interface {
	// AddRule adds to Dataship
	AddRule(context.Context, *PbRule) (*OpResult, error)
	// DelRule deletes a Rule on Dataship
	DelRule(context.Context, *PbRule) (*OpResult, error)
	AddAddr(context.Context, *PbAddr) (*OpResult, error)
	DelAddr(context.Context, *PbAddr) (*OpResult, error)
	ModAddr(context.Context, *PbAddrMod) (*OpResult, error)
	AddRoute(context.Context, *PbRoute) (*OpResult, error)
	DelRoute(context.Context, *PbRoute) (*OpResult, error)
	ModRoute(context.Context, *PbRouteMod) (*OpResult, error)
}

func RegisterDatashipServer(s *grpc.Server, srv DatashipServer) {
	s.RegisterService(&_Dataship_serviceDesc, srv)
}

func _Dataship_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/AddRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).AddRule(ctx, req.(*PbRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_DelRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).DelRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/DelRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).DelRule(ctx, req.(*PbRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_AddAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).AddAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/AddAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).AddAddr(ctx, req.(*PbAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_DelAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).DelAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/DelAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).DelAddr(ctx, req.(*PbAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_ModAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbAddrMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).ModAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/ModAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).ModAddr(ctx, req.(*PbAddrMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).AddRoute(ctx, req.(*PbRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_DelRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).DelRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/DelRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).DelRoute(ctx, req.(*PbRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataship_ModRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbRouteMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatashipServer).ModRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dataship/ModRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatashipServer).ModRoute(ctx, req.(*PbRouteMod))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dataship_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Dataship",
	HandlerType: (*DatashipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRule",
			Handler:    _Dataship_AddRule_Handler,
		},
		{
			MethodName: "DelRule",
			Handler:    _Dataship_DelRule_Handler,
		},
		{
			MethodName: "AddAddr",
			Handler:    _Dataship_AddAddr_Handler,
		},
		{
			MethodName: "DelAddr",
			Handler:    _Dataship_DelAddr_Handler,
		},
		{
			MethodName: "ModAddr",
			Handler:    _Dataship_ModAddr_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Dataship_AddRoute_Handler,
		},
		{
			MethodName: "DelRoute",
			Handler:    _Dataship_DelRoute_Handler,
		},
		{
			MethodName: "ModRoute",
			Handler:    _Dataship_ModRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataship.proto",
}

func init() { proto.RegisterFile("dataship.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x8d, 0x6d, 0x62, 0x3b, 0x43, 0x71, 0xad, 0x55, 0x14, 0x59, 0x91, 0x4a, 0x23, 0x4b, 0x6d,
	0x68, 0x5a, 0x71, 0x70, 0xbf, 0x80, 0x02, 0x55, 0x91, 0x02, 0x58, 0xc6, 0x91, 0x72, 0x8b, 0x0c,
	0xbb, 0x6d, 0xad, 0x50, 0xd6, 0xb2, 0x17, 0x21, 0x6e, 0xfd, 0xc7, 0xde, 0xfb, 0x2d, 0xd5, 0xce,
	0x2e, 0xc1, 0xa5, 0xa9, 0xc4, 0x05, 0x31, 0xf3, 0xde, 0xbc, 0x99, 0x37, 0xcc, 0x02, 0x1e, 0xcd,
	0x44, 0x56, 0x7d, 0xcf, 0x8b, 0x6e, 0x51, 0x72, 0xc1, 0x89, 0x55, 0x16, 0x8b, 0xf0, 0x3d, 0xb8,
	0xd3, 0x22, 0x61, 0xd5, 0x7a, 0x29, 0xc8, 0x6b, 0x68, 0x2c, 0x38, 0x65, 0x81, 0x71, 0x65, 0x74,
	0xbc, 0xa8, 0xd9, 0x2d, 0x8b, 0x45, 0x77, 0x5a, 0xf4, 0x39, 0x65, 0x09, 0x02, 0xe1, 0x27, 0xb0,
	0xe3, 0x79, 0x8f, 0xd2, 0x92, 0x9c, 0xc3, 0x69, 0xfe, 0x35, 0x5b, 0x28, 0xee, 0x59, 0xa2, 0x02,
	0xe2, 0x81, 0x99, 0x17, 0x81, 0x89, 0x29, 0x33, 0x2f, 0x08, 0x81, 0xc6, 0x8f, 0xac, 0x7a, 0x0c,
	0xac, 0x2b, 0xa3, 0xd3, 0x4a, 0xf0, 0x7b, 0xf8, 0x08, 0x4e, 0x3c, 0x4f, 0xf8, 0x5a, 0x30, 0x72,
	0x01, 0x36, 0xad, 0xc4, 0x84, 0x09, 0xad, 0xa2, 0x23, 0x12, 0x80, 0x43, 0x2b, 0x31, 0x96, 0x95,
	0x26, 0x56, 0xee, 0xc2, 0x7d, 0x5b, 0xab, 0xde, 0x36, 0x00, 0xe7, 0x5b, 0x26, 0xd8, 0x26, 0xdb,
	0x06, 0x0d, 0xcc, 0xef, 0xc2, 0xf0, 0x97, 0x29, 0x27, 0x4e, 0xd6, 0x4b, 0x35, 0x1b, 0xc5, 0x46,
	0xad, 0xc4, 0xcc, 0x29, 0xe9, 0x82, 0x4d, 0xf3, 0x92, 0x2d, 0x04, 0xf6, 0xf0, 0xa2, 0x0b, 0xb4,
	0xab, 0xc8, 0x5d, 0xf9, 0x31, 0x40, 0x34, 0xd1, 0x2c, 0xd2, 0x81, 0x86, 0xd8, 0x16, 0xaa, 0xb3,
	0x17, 0x9d, 0x1f, 0xb2, 0xd3, 0x6d, 0xc1, 0x12, 0x64, 0x90, 0x36, 0xc0, 0x32, 0xaf, 0x04, 0x5b,
	0xc9, 0x4d, 0xe9, 0x89, 0x6a, 0x99, 0x3d, 0x1e, 0xf3, 0x52, 0x04, 0xa7, 0x38, 0x51, 0x2d, 0xa3,
	0xed, 0x63, 0xb1, 0xad, 0xec, 0xe8, 0x50, 0x23, 0x58, 0xe6, 0x3c, 0x2d, 0x06, 0x6b, 0x2e, 0xc1,
	0xad, 0xd8, 0x8a, 0x62, 0x91, 0x8b, 0x45, 0x4f, 0x71, 0xf8, 0x16, 0x60, 0xef, 0x87, 0x34, 0xc1,
	0x19, 0x4d, 0xd2, 0x68, 0x78, 0x9f, 0xfa, 0x27, 0x32, 0x18, 0xde, 0xa7, 0xd1, 0x68, 0x92, 0xfa,
	0x46, 0x78, 0x0d, 0xee, 0xce, 0x09, 0x71, 0xc0, 0x4a, 0xfb, 0xb1, 0x7f, 0x42, 0x5c, 0x68, 0x7c,
	0x49, 0xd3, 0xd8, 0x37, 0x88, 0x0b, 0xd6, 0xdd, 0x20, 0xf6, 0x7f, 0x1a, 0xe1, 0x08, 0xce, 0xd4,
	0x19, 0x8c, 0x39, 0x25, 0xaf, 0xc0, 0xe2, 0x4b, 0xb5, 0xd8, 0xa6, 0xbe, 0x19, 0x05, 0x26, 0x32,
	0x2f, 0xe1, 0x15, 0xdb, 0xe0, 0x8e, 0x0f, 0xe1, 0x15, 0xdb, 0x84, 0xb7, 0x00, 0xfa, 0x1a, 0xa4,
	0x56, 0xbb, 0xae, 0xf5, 0x62, 0xb7, 0x62, 0x89, 0x2a, 0xb1, 0x76, 0x5d, 0xec, 0x00, 0x5f, 0xb1,
	0xcd, 0xcd, 0x1b, 0xb0, 0xd5, 0xbd, 0x12, 0x0f, 0x60, 0x1a, 0x3f, 0xcc, 0xee, 0xfa, 0xfd, 0xe1,
	0x6c, 0xa6, 0x8c, 0x4e, 0xe3, 0x87, 0xcf, 0xbd, 0xd1, 0xad, 0x6f, 0x44, 0xbf, 0x4d, 0x70, 0x07,
	0xfa, 0x2d, 0x90, 0x6b, 0x70, 0x7a, 0x94, 0xe2, 0x89, 0x34, 0x6b, 0x3f, 0xea, 0x65, 0x4b, 0x9f,
	0xbf, 0x7a, 0x1b, 0xe1, 0x89, 0x24, 0x0e, 0xd8, 0xf2, 0x38, 0x62, 0x8f, 0xe2, 0xea, 0x49, 0xdd,
	0xf0, 0xff, 0x14, 0x8f, 0x20, 0xde, 0x80, 0x33, 0xe6, 0x4a, 0xd1, 0xab, 0x11, 0xc7, 0x9c, 0xfe,
	0xcb, 0x7d, 0x07, 0xae, 0xf4, 0x83, 0x0f, 0xec, 0xaf, 0x15, 0x3d, 0x4b, 0x95, 0x8e, 0x8e, 0xa1,
	0x7e, 0x00, 0x77, 0xcc, 0xb5, 0xea, 0xcb, 0x3a, 0xf5, 0xb9, 0x19, 0xe6, 0x36, 0xfe, 0xc1, 0x7c,
	0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x08, 0x7a, 0xcb, 0x72, 0x04, 0x00, 0x00,
}
